@use 'sass:map';

@import 'mixins';
@import 'colors';
@import 'nav';

*, ::after, ::before {
  box-sizing: border-box;
}

// CSS Variables:
//   --color-text: Controls the color of the text

// perhaps do invert color too?
// Limited to cards (div), buttons, imgs, buttons, etc
@each $name, $swatch in $swatches {
  .sw-#{$name} {
    // --color-self: #{map.get($swatch, "self")};
    --color-text: #{map.get($swatch, "text")};
    --color-bg: #{map.get($swatch, "bg")};
    --color-accent:  #{map.get($swatch, "accent")};
    --color-strong: #{map.get($swatch, "strong")};
  }
}

html, body {
  z-index: -1;
  margin: 0px;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: var(--color-text, black);
  background-color: var(--color-bg, $light);
  font-family: Rubik, Inter, Roobert, Helvetica Neue, Helvetica, Arial, sans-serif;
  font-size: 100%;
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 500;
  line-height: 1.2;
  margin-top: 0;
  margin-bottom: 0;
}

h1 { font-size: 3rem; }
h2 { font-size: 2.25rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.25rem; }
h6 { font-size: 1rem; }

p {
  line-height: 1.5;
  margin-top: 0;
  margin-bottom: 0;
}

a {
  color: var(--color-text, black);
}

strong {
  color: var(--color-strong, black);
}

.stack {
  @include stack("*:not(img)", "*");
}

main {
  @include stack("*", "*");

  width: 100%;
  max-width: 1320px;
  margin-left: auto;
  margin-right: auto;
  padding: min(40px, 4vw);
}

div {
  color: var(--color-text, black);
  background-color: var(--color-bg, white);
}

main:last-child {
  margin-bottom: 1rem;
}

%lifted-element {
  color: var(--color-text, black);
  background-color: var(--color-bg, white);
  border: 1px solid black;
  border-radius: 0;
  box-shadow: 5px 5px var(--color-accent, $gray-light);
}

.card {
  @extend %lifted-element;

  width: 100%;
  padding: 1rem;
}

button {
  @extend %lifted-element;

  font: inherit;
  cursor: pointer;
  line-height: 1.5;
  font-weight: bold;
  text-align: center;
  outline: none;
  text-decoration: none;
  vertical-align: middle;
  user-select: none;
  margin-right: 5px;
  margin-bottom: 5px;
  padding: .375rem .75rem;
  transition: color .15s ease-in-out, background-color .15s ease-in-out;

  a {
    transition: color .15s ease-in-out;
  }

  &:hover {
    color: var(--color-bg, black);
    background-color: var(--color-text, white);
  }

  &:hover a {
    color: var(--color-bg, black);
  }

  &:active {
    transform: translate(5px, 5px);
    box-shadow: none;
  }
}

img {
  @extend %lifted-element;
}

footer, j-footer {
  @include stack("*", "*");
  color: white;
  background-color: black;

  margin-top: auto;
  padding: 2rem 0;
  text-align: center;

  a {
    color: white;
  }
}

%col {
  display: grid;
  column-gap: 1rem;
  background-color: var(--color-bg, $light);
}

.col-2 {
  @extend %col;
  grid-template-columns: 1fr 1fr;

  > :nth-child(n+3) {
    margin-top: 1rem;
  }
}

.col-3 {
  @extend %col;
  grid-template-columns: 1fr 1fr 1fr;

  > :nth-child(n+4) {
    margin-top: 1rem;
  }
}

@media (max-width: 768px) {
  .col-2 {
    grid-template-columns: 1fr;

    > :nth-child(n+2) {
      margin-top: 1rem;
    }
  }

  .col-3 {
    grid-template-columns: 1fr 1fr;

    > :nth-child(n+3) {
      margin-top: 1rem;
    }
  }
}

@media (max-width: 500px) {
  .col-3 {
    grid-template-columns: 1fr;

    > :nth-child(n+2) {
      margin-top: 1rem;
    }
  }
}