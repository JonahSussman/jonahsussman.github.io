---
layout: layouts/base.njk
title: this-wiki-dne

theme: theme-blue
petiteVue: true
---

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
::selection {
  background: #3399FF; /* WebKit/Blink Browsers */
}

.wiki-container {
  /* background-color: f6f6f6; */
  font-family: sans-serif;
  font-size: 16px;

  display: grid;
  grid-template-columns: 11em minmax(0, calc(800px - 11em));
  grid-template-areas: "wiki-panel wiki-content";

  word-wrap: break-word;

  background-image: linear-gradient(to bottom, white 0px, white 2.5em, #f6f6f6 5em, #f6f6f6 100%);
}

.wiki-panel {
  grid-area: wiki-panel;
  padding-left: .5em;
  padding-right: .5em;
}

.wiki-content {
  grid-area: wiki-content;
}
.wiki-logo {
  display: block;
  width: 160px;
  height: 160px;
  margin-bottom: 1em;
  background-position: center center;
  background-repeat: no-repeat;
  background-image: url('/assets/projects/wiki-thumb.png');
}

.wiki-container p {
  font-size: .875em;
}

.wiki-container h1 {
  font-size: 1.8em;
  margin-top: 0;
  margin-bottom: 0.25em;
  padding: 0;
  font-family: 'Linux Libertine','Georgia','Times',serif;
  line-height: 1.3;
  font-weight: normal;
  border-bottom: 1px solid #a2a9b1;
}

.wiki-container h2 {
  font-size: calc(.875em * .92);
  margin: 0;
  font-weight: 400;
  margin-bottom: 1.4em;
}

.wiki-container a {
  color: #0645ad;
  cursor: pointer;
  text-decoration: none;
}
.wiki-container a:hover, a:focus {
  text-decoration: underline;
}

.wiki-menu {
  margin: 0 0.6em 0 0.7em;
  padding: 0.25em 0;
}

.wiki-menu-content {
  margin-left: 0.5em;
  padding-top: 0;
}

.wiki-menu-list {
  list-style: none none;
  margin: 0;
  padding: 0;
  padding-top: 0.3em;
}

.wiki-menu-item {
  margin: 0;
  padding: 0.25em 0;
  font-size: 0.75em;
  line-height: 1.125em;
  word-wrap: break-word;
}

.wiki-menu-label {
  display: block;
  /* background-image: url(/w/skins/Vector/resources/common/images/portal-separator.png?4ab04); */
  background-image: linear-gradient(to right,rgba(200,204,209,0) 0,#c8ccd1 33%,#c8ccd1 66%,rgba(200,204,209,0) 100%);
  background-position: center bottom;
  background-repeat: no-repeat;
  background-size: 100% 1px;
  color: #54595d;
  margin: 0.5em 0 0 0.66666667em;
  border: 0;
  padding: 0.25em 0;
  font-size: 0.75em;
  font-weight: normal;
  cursor: default;
}

.wiki-head {
  display: flex;
  justify-content: space-between;
}

.wiki-nav-right {
  margin-top: 2.5em;
}

#wiki-search {
  height: 2.5em;
  padding-top: .5em;
  padding-bottom: 4px;
}

#wiki-input {
  min-width: 5em;
  width: 13.2em;
  width: 20vw;
  max-width: 20em;
  margin-right: 1em;
  margin-left: .5em;

  height: 100%;
}

.wiki-main {
  background-color: white;
  border-left: 1px solid #a7d7f9;
  border-top: 1px solid #a7d7f9;
  border-bottom: 1px solid #a7d7f9;
  padding: 1.25em 1.5em 1.5em 1.5em;
}

.wiki-footer {
  padding: 1.25em;
  font-size: 12px;
}

.wiki-indicators {
  float: right;
}

.spinner {
  margin: 100px auto;
  width: 50px;
  height: 40px;
  text-align: center;
  font-size: 10px;
}

.spinner > div {
  background-color: #333;
  height: 100%;
  width: 6px;
  display: inline-block;
  
  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.spinner .rect2 {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s;
}

.spinner .rect3 {
  -webkit-animation-delay: -1.0s;
  animation-delay: -1.0s;
}

.spinner .rect4 {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s;
}

.spinner .rect5 {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s;
}

@-webkit-keyframes sk-stretchdelay {
  0%, 40%, 100% { -webkit-transform: scaleY(0.4) }  
  20% { -webkit-transform: scaleY(1.0) }
}

@keyframes sk-stretchdelay {
  0%, 40%, 100% { 
    transform: scaleY(0.4);
    -webkit-transform: scaleY(0.4);
  }  20% { 
    transform: scaleY(1.0);
    -webkit-transform: scaleY(1.0);
  }
}


/* .layout-single {
  max-width: calc(10em + 80ch) !important;
  grid-template-columns: calc(minmax(0, 80ch) + 10em) !important;
} */
</style>

<script type="module">
// PetiteVue.createApp

function Spinner(props) {
  return {
    $template: '#template-spinner',
    test() { return 'This is a test'; }
  }
}

function Section(props) {
  return {
    $template: '#template-wiki-section',
    isLoading: false,
    title: 'Welcome to Tensorpedia!',
    paragraphs: `
    <p>Welcome to <b>Tensorpedia</b>! Tensorpedia is a poorly auto-generated Wikipedia clone utilizing <a href="https://github.com/minimaxir/aitextgen">aitextgen</a> and <a href="https://openai.com/blog/better-language-models/">GPT-2</a>. In other words, none of these articles exist! This website takes a given title and generates a viable-looking Wikipedia-like article about it, using Wikipedia's 10,000 <a href="https://en.wikipedia.org/wiki/Wikipedia:Vital_articles/Level/4">"vital articles"</a> as a dataset. If you want to learn more about how I created this project, check out <a>my article here</a>.</p>
    <p>You can navigate to different pages within Tensorpedia in a few ways. The first and easiest way is to click on a link within the page. This will make a request to the server to either generate a new page, or show a previously generated cached version. You can also use the search box in the upper right-hand part of the page. Finally, you can generate a random page by clicking the random page button on the left.</p>
    <p>Here are some links to get you started:</p>
    <ul style="margin: 0.3em 0 0 1.6em;padding: 0;font-size:.875em;">
      <li><a onclick="wikinav('Science')">Science</a></li>
      <li><a onclick="wikinav('Alan Turing')">Alan Turing</a></li>
      <li><a onclick="wikinav('Jonah Sussman')">Jonah Sussman</a></li>
      <li><a onclick="wikinav('The Hugo Award')">The Hugo Award</a></li>
      <li><a onclick="wikinav('New York City')">New York City</a></li>
      <li><a onclick="wikinav('Rijksmuseum')">Rijksmuseum</a></li>
    </ul>
    `,
    showSpinner(name) {
      if (name === 'spinner') {
        return this.isLoading ? 'display: block;' : 'display: none;'
      } else {
        return !this.isLoading ? 'display: block;' : 'display: none;'
      }
    }
  }
}

PetiteVue.createApp({ 
  $delimiters: ['${', '}'], 
  Spinner,
  Section
}).mount('#wiki-container')
</script>

<template id="template-spinner">
  <div class="spinner">
    <div class="rect1"></div>
    <div class="rect2"></div>
    <div class="rect3"></div>
    <div class="rect4"></div>
    <div class="rect5"></div>
  </div>
  <p>${ test() }</p>
  <p style="text-align: center;">Please allow up to 30 seconds for text generation.</p>
</template>

<template id="template-wiki-section">
  <div class="wiki-section">
    <h1 id="wiki-title">${ title }</h1>
    <h2>From Tensorpedia, the poorly auto-generated encyclopedia</h2>
    <div v-bind:style="showSpinner('spinner')" v-scope="Spinner({})"></div>
    <div class="wiki-paragraphs">${ paragraphs }</div>
  </div>
</template>


<script>
function wikinav(title, regen=false) {
  let wiki_main = document.getElementById('wiki-main');
  wiki_main.innerHTML = `
  <h1>` + title + `</h1>
    <h2>From Tensorpedia, the poorly auto-generated encyclopedia</h2>
      <div class="spinner">
        <div class="rect1"></div>
        <div class="rect2"></div>
        <div class="rect3"></div>
        <div class="rect4"></div>
        <div class="rect5"></div>
      </div>
      <p style="text-align: center;">Please allow up to 30 seconds for text generation.</p>`

  let xmlHttp = new XMLHttpRequest();
  let theURL = "http://159.223.176.97:80/this-wiki-dne?title="+title+"&regen="+regen.toString();
  xmlHttp.open( "GET", theURL , false ); // false for synchronous request
  xmlHttp.send( null );

  let q0 = xmlHttp.responseText;
  let q1 = q0.replace(/\[\[ /g, '\[\[').replace(/ \]\]/g, '\]\]').replace(/ \| /g, '\|').replace(/\.([^.]*)$/, '.');
  let obj = {};
  q1.replace(/== (.*) == *(.*)/g, (str, title, wikitext) => {
    // obj.title = title;
    obj.html = '<div class="wiki-section">\n<div class="wiki-indicators"><button style="font-size:0.875em" onclick="wikinav(document.getElementById(\'wiki-title\').innerHTML, true)"><i class="fa fa-refresh"></i></button></div><h1 id="wiki-title">'+title+'</h1>\n<h2>From Tensorpedia, the poorly auto-generated encyclopedia</h2>\n<div class="wiki-paragraphs">\n'
    obj.wikitext = wikitext.replace(/ *\\n */g, '\n');
    // obj.sentences = [];
    obj.wikitext.replace(/^.*$/gm, (sentence) => {
      sentence = sentence
        .replace(/'{3}([^']*)'{3}/g, (m, g) => '<b>'+g+'</b>')
        .replace(/'{2}([^']*)'{2}/g, (m, g) => '<i>'+g+'</i>')
        .replace(/\[\[([^[]*)\|([^\]]*)\]\]/g, (m, g1, g2) => '<a onclick="wikinav(\''+g1+'\')">'+g2+'</a>')
        .replace(/\[\[([^[|]*)\]\]/g, (m, g) => '<a onclick="wikinav(\''+g+'\')">'+g+'</a>')
        .replace(/\[\[/g, '').replace(/\]\]/g, '')

      obj.html += '<p>'+sentence+'</p>\n'
      // obj.sentences.push(sentence);
    })
    obj.html += '</div>\n</div>\n';
    // return '<h1 class="wiki-title">'+g1+'</h1>\n<div class="wiki-section">\n'+g2+'\n</div>';
  });
  
  wiki_main.innerHTML = obj.html;
}

function wikirandom() {
  let xmlHttp = new XMLHttpRequest();
  let theURL = "https://en.wikipedia.org/api/rest_v1/page/random/summary";
  // let theURL = "http://en.wikipedia.org/w/api.php?action=query&format=json&list=random&rnnamespace=0&rnlimit=1";
  xmlHttp.open( "GET", theURL , false ); // false for synchronous request
  xmlHttp.send( null );
  let wiki_main = document.getElementById('wiki-main');
  wikinav(JSON.parse(xmlHttp.responseText).displaytitle);
}

function wikihome() {
  location.reload();
}

</script>
<div class="site-content">

<div id="wiki-container" class="wiki-container">
  <div class="wiki-panel">
    <a onclick="wikihome()" class="wiki-logo"></a>

    <nav class="wiki-menu">
      <div class="wiki-menu-content">
        <ul class="wiki-menu-list">
          <li class="wiki-menu-item"><a onclick="wikihome()">Main page</a></li>
          <li class="wiki-menu-item"><a onclick="wikirandom()">Random article</a></li>
          <li class="wiki-menu-item"><a href="/">About Tensorpedia</a></li> <!-- Add back title stuff -->
          <li class="wiki-menu-item"><a href="/">Contact me</a></li>
          <li class="wiki-menu-item"><a href="/">Donate</a></li>
        </ul>
      </div>
    </nav>

    <nav class="wiki-menu">
      <h3 class="wiki-menu-label">Print/export</h3>
      <div class="wiki-menu-content">
        <ul class="wiki-menu-list">
          <li class="wiki-menu-item"><a href="https://en.wikipedia.org/wiki/Main_Page"><span>Save a screenshot</span></a></li>
        </ul>
      </div>
    </nav>
  </div>

  <div class="wiki-content">
    <div class="wiki-head">
      <div class="wiki-nav-left"></div>
      <div class="wiki-nav-right">
        <form id="wiki-search" onsubmit="event.preventDefault(); let x = document.getElementById('wiki-input'); let y = x.value; x.value = ''; wikinav(y);">
          <input id="wiki-input" type="text" placeholder="Search Tensorpedia">
        </div>
    </div>

    <div id="wiki-main" class="wiki-main">
      <!-- <div class="wiki-section">
        <h1 id="wiki-title">Welcome to Tensorpedia!</h1>
        <h2>From Tensorpedia, the poorly auto-generated encyclopedia</h2>
        <div v-scope="Spinner({})"></div>
        <div class="wiki-paragraphs">
          <p>Welcome to <b>Tensorpedia</b>! Tensorpedia is a poorly auto-generated Wikipedia clone utilizing <a href="https://github.com/minimaxir/aitextgen">aitextgen</a> and <a href="https://openai.com/blog/better-language-models/">GPT-2</a>. In other words, none of these articles exist! This website takes a given title and generates a viable-looking Wikipedia-like article about it, using Wikipedia's 10,000 <a href="https://en.wikipedia.org/wiki/Wikipedia:Vital_articles/Level/4">"vital articles"</a> as a dataset. If you want to learn more about how I created this project, check out <a>my article here</a>.</p>
          <p>You can navigate to different pages within Tensorpedia in a few ways. The first and easiest way is to click on a link within the page. This will make a request to the server to either generate a new page, or show a previously generated cached version. You can also use the search box in the upper right-hand part of the page. Finally, you can generate a random page by clicking the random page button on the left.</p>
          <p>Here are some links to get you started:</p>
          <ul style="margin: 0.3em 0 0 1.6em;padding: 0;font-size:.875em;">
            <li><a onclick="wikinav('Science')">Science</a></li>
            <li><a onclick="wikinav('Alan Turing')">Alan Turing</a></li>
            <li><a onclick="wikinav('Jonah Sussman')">Jonah Sussman</a></li>
            <li><a onclick="wikinav('The Hugo Award')">The Hugo Award</a></li>
            <li><a onclick="wikinav('New York City')">New York City</a></li>
            <li><a onclick="wikinav('Rijksmuseum')">Rijksmuseum</a></li>
          </ul>
        </div>
      </div> -->
      <div v-scope="Section({})"></div>
    </div>
    <div class="wiki-footer">
      <p>I am not responsible for any text generated that may be offensive.</p>
      <p>Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. I have no association with Wikipedia.</p>
      <p>Any thoughts expressed by me are mine and mine alone.</p>
    </div>


</div>

</div>
  
</div>